# -*- coding: utf-8 -*-
"""prob_1_lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sp6psAEchUZEafQ8H8eUAowVTPNl_og4
"""

import cv2
import numpy as np
import glob
import matplotlib.pyplot as plt
import os

"""using the glob library to recursively find all the images"""

def cum_def_fun(img):
    cdf = []
    for i in  range(255):
        cdf.append((((np.shape((np.where(img<=i))))[1])/img.size))
    return cdf

def hist_eq(img):
    img_lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    
    l_channel,a_channel,b_channel = cv2.split(img_lab)
    l_channel_eq = np.copy(l_channel)
    for i in  range(np.max(l_channel)):
        l_channel_eq[np.where(l_channel==i)] = np.floor((((np.shape((np.where(l_channel<=i))))[1])/l_channel.size)*(np.max(l_channel)-np.min(l_channel)))
        merged = cv2.merge([l_channel_eq, a_channel, b_channel])
        eq_img= cv2.cvtColor(merged, cv2.COLOR_LAB2BGR)
    return eq_img

frames =[]
frame = cv2.imread('images/' + str(0) +'.png')
frames = sorted(os.listdir('images/'))
video_output = cv2.VideoWriter('Histo_eq_lab.avi',cv2.VideoWriter_fourcc(*'DIVX'), 10, (frame.shape[1],frame.shape[0]))

for i in range(25):
    
    image_og = cv2.imread('images/' + str(i) +'.png')
    # cdf = cum_def_fun(image_og)
    eq_img = hist_eq(image_og)
    video_output.write(eq_img)
    # cv2.imshow('1',eq_img)
    # cv2.waitKey()
    # cv2.destroyAllWindows()